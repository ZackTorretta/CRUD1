@page "/edit/{ContactId}"
@inject NavigationManager UriHelper
@using CRUD1.Data
@using System.ComponentModel

@inject PersonServices service

<div class="container">

</div>
	<div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Edit Information</div>

            <EditForm Model="@theperson" OnValidSubmit="@UpdatePersonData">
				<DataAnnotationsValidator />
				<ValidationSummary />
                <div class="form-group">
                    <label for="FirstName">First Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.FirstName" />
                </div>
                <div class="form-group">
                    <label for="FirstName">Last Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.LastName" />
                </div>
                <div class="form-group">
                    <label for="FirstName">Phone Number</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.PhoneNumber" />
                </div>
                <div class="form-group">
                    <label for="FirstName">BirthDate</label>
                    <input type="date" id="FirstName" class="form-control" @bind-value="theperson.BirthDate" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button type="submit">Edit Person</button>
                </div>
            </EditForm>
        </div>

        
    </div>

@code {




    private PersonDBcontext? dbContext;
    [Parameter]
    public string? ContactId { get; set; } //contact id of string coming in. 
    Guid MainPerson;
   

    Person theperson = new Person();

    protected override async Task OnInitializedAsync()
    {
        await RefreshPersons();
    }
    private async Task RefreshPersons()
    {
        try
        {
            MainPerson = (Guid)(new GuidConverter().ConvertFrom(ContactId));
        }
        catch
        {
            throw;
        }

        theperson = await service.GetSinglePerson(MainPerson);

    }
    

	private async Task UpdatePersonData()
	{
        Console.WriteLine("inside updateperson");
		await service.UpdatePersonAsync(theperson);
		await RefreshPersons();
        UriHelper.NavigateTo("/");
	}
}
