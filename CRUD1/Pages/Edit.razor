@page "/edit/{ContactId}"
@inject NavigationManager UriHelper
@using CRUD1.Data
@using System.ComponentModel

@inject PersonServices service

<div class="container">

</div>
	<div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Edit Information</div>

            <EditForm Model="@theperson" OnValidSubmit="@UpdatePersonData">
				<DataAnnotationsValidator />
				<ValidationSummary />
                <div class="form-group">
                    <label for="FirstName">First Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.FirstName" />
                </div>
                <div class="form-group">
                    <label for="FirstName">Last Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.LastName" />
                </div>
                <div class="form-group">
                    <label for="FirstName">Phone Number</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.PhoneNumber" />
                </div>
                <div class="form-group">
                    <label for="FirstName">BirthDate</label>
                    <input type="date" id="FirstName" class="form-control" @bind-value="theperson.BirthDate" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button type="submit">Edit Person</button>
                </div>
            </EditForm>
        </div>

        
    </div>
@*<EditForm Model="theperson">
                <div class="form-group">
                    <label for="FirstName">Person First Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.FirstName" />
                </div>
                <div class="form-group">
                    <label for="FirstName">Person First Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.LastName" />
                </div>
                <div class="form-group">
                    <label for="FirstName">Person First Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="theperson.PhoneNumber" />
                </div>
                <div class="form-group">
                    <label for="FirstName">Person First Name</label>
                    <input type="date" id="FirstName" class="form-control" @bind-value="theperson.BirthDate" />
                </div>


            </EditForm>*@
@code {




    private PersonDBcontext? dbContext;
    [Parameter]
    public string? ContactId { get; set; }
    Guid MainPerson;
    private Person? person { get; set; }
    List<Person> Persons = new List<Person>();



    Person theperson = new Person();



    //protected override void OnInitialized()
    //{
    //    person = service.GetPersonAsync();
    //}
    //protected override async Task OnParametersSetAsync()
    //{
    //    MainPerson = (Guid)(new GuidConverter().ConvertFrom(ContactId));

    //    theperson = await service.GetSinglePerson(ContactId);
    //}
    protected override async Task OnInitializedAsync()
    {
        await RefreshPersons();
    }
    private async Task RefreshPersons()
    {
        MainPerson = (Guid)(new GuidConverter().ConvertFrom(ContactId));
        Console.WriteLine(MainPerson);
        Console.WriteLine(MainPerson.GetType());
        Persons = await service.GetPersonAsync();
        theperson = await service.GetSinglePerson(MainPerson);
        Console.WriteLine(theperson.FirstName);

        //Console.WriteLine(TypeDescriptor.GetConverter(MainPerson).ConvertFrom(ContactId));
        //Console.WriteLine(MainPerson);
        //Console.WriteLine(MainPerson.GetType());
        //var prod = dbContext.Person.FindAsync(MainPerson);
        //Console.WriteLine("prod is: ", prod);
        //var productExist = dbContext.Person.FirstOrDefault(p => p.Id == p.Id);
    }
    

	private async Task UpdatePersonData()
	{
		await service.UpdatePersonAsync(theperson);
		await RefreshPersons();
        UriHelper.NavigateTo("/");
	}
    //private async Task FindIndex()
    //{
    //    int index = Persons.FindIndex(a => a.Contains("hello"));
    //}


}
