@page "/"
@inject NavigationManager UriHelper
@using CRUD1.Data
@inject PersonServices service
@using Microsoft.EntityFrameworkCore
@using System.Linq



<div class="container">
	<style>
		
        h1 {
			text-align: right;
			font-size:150%;
        }
		h2 {
			text-align: left;
			font-size:150%;
        }
		</style>
	<h1><button @onclick=@NavigateAdd>Add</button></h1>


	<label>Sort:</label>
	<select @bind=SelectedSort>
		<option>sorting</option>
		<option value ="first" >First Name</option>
		<option value ="last" >Last Name</option>
	</select>



	<div class="row bg-light">
		<table class="table table-bordered">
			<thead class="thead-dark">
				<tr>
					<th>Person Id</th>
					<th>LastName</th>
					<th>FirstName</th>
					<th>PhoneNumber</th>
					<th>BirthDate</th>
					<th>Delete Person</th>
					<th>Edit Person</th>
				</tr>
			</thead>
			<tbody>
				@if (Persons.Any()) //list
				{
					@foreach (var person in Persons) //navigate list
					{
						<tr>
							<td>@person.Id</td>
							<td>@person.LastName</td>
							<td>@person.FirstName</td>
							<td>@person.PhoneNumber</td>
							<td>@person.BirthDate</td
							<td><button @onclick="(async () => await ShowConfirmationModal(person))" class="btn btn-danger">Delete</button></td>
							<td><button class="btn btn-primary" @onclick="(() => NavigateEdit(person))">Edit</button></td>
						</tr>
					}
				}
				else
				{
					<tr><td colspan="6"><strong>No persons available</strong></td></tr> //when list is empty. mess with this
				}
			</tbody>
		</table>
	</div>
</div>


@code {

	[Parameter]
	public Guid Id { get; set; }


	[CascadingParameter] IModalService? Modal { get; set; }

	private string? selectedSort;

	public string? SelectedSort
	{
		get { return selectedSort; }
		set 
		{
			selectedSort = value;
			Console.WriteLine("current selected", selectedSort);
			if (selectedSort == "last")
			{
				SortNameLast();
			}
			if (selectedSort == "first")
			{
				SortNameFirst();
			}

		}
	}

	//SORTING METHODS
	void SortNameLast()
	{
		Persons = Persons.OrderBy(p => p.LastName).ToList();
		Console.WriteLine("inside last sort");
	}

	void SortNameFirst()
	{
		Persons = Persons.OrderBy(p => p.FirstName).ToList();
		Console.WriteLine("inside first sort");
	}






	//NAVIGATION SECTION
	private Person? Person { get; set; }
	void NavigateAdd()
	{
		UriHelper.NavigateTo("add");
	}
	void NavigateEdit(Person person)
	{
		UriHelper.NavigateTo("/edit/" + person.Id);
	}
	//*****/

	List<Person> Persons = new List<Person>();
	protected override async Task OnInitializedAsync()
	{
		await RefreshPersons();

	}
	private async Task RefreshPersons()
	{
		Persons = await service.GetPersonAsync();


	}

	

	private async Task ShowConfirmationModal(Person person)
	{
		var parameters = new ModalParameters();
		parameters.Add("ThePersonId", person);

		var confirmationModal = Modal.Show<ConfirmDelete>("Delete Person?", parameters);
		var result = await confirmationModal.Result;

		if (!result.Cancelled)
		{
			Console.WriteLine("it has been deleted");
			await RefreshPersons();
			//refresh here?
		}
	}

}