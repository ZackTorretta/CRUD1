@page "/"

@using CRUD1.Data

@inject PersonServices service

<div class="container">

	<div class="row bg-light">
		<table class="table table-bordered">
			<thead class="thead-dark">
				<tr>
					<th>Person Id</th>
					<th>LastName</th>
					<th>FirstName</th>
					<th>PhoneNumber</th>
					<th>BirthDate</th>
					<td>Add Person</td>
					<th>Delete Person</th>
				</tr>
			</thead>
			<tbody>
				@if (Persons.Any()) //list
				{
					@foreach (var person in Persons) //navigate list
					{
						<tr @onclick="(() => SetPersonUpdate(person))">
							<td>@person.Id</td>
							<td>@person.LastName</td>
							<td>@person.FirstName</td>
							<td>@person.PhoneNumber</td>
							<td>@person.BirthDate</td
							<td><button class="btn btn-danger" @onclick="(() => DeletePerson(person))">Add</button></td>
							<td><button class="btn btn-danger" @onclick="(() => DeletePerson(person))">Delete</button></td>
						</tr>
					}
				}
				else
				{
					<tr><td colspan="6"><strong>No persons available</strong></td></tr> //when list is empty. mess with this
				}
			</tbody>
		</table>
	</div>
	<div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Person</div>

            <EditForm Model="@NewPerson" OnValidSubmit="@AddNewPerson">
				<DataAnnotationsValidator />
				<ValidationSummary />
                <div class="form-group"> @*Last name*@
                    <label for="LastName">Person's' First Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="@NewPerson.FirstName" />
                </div>

				<div class="form-group"> @*Last name*@
                    <label for="LastName">Person Last Name</label>
                    <input type="text" id="LastName" class="form-control" @bind-value="@NewPerson.LastName" />
                </div>

				<div class="form-group"> @*phone number*@
                    <label for="PhoneNumber">Person's Phone</label>
                    <input type="text" id="PhoneNumber" class="form-control" @bind-value="@NewPerson.PhoneNumber" />
                </div>

				<div class="form-group"> @*birth date*@
                    <label for="BirthDate">birth date</label>
                    <input type="date" id="BirthDate" class="form-control" @bind-value="@NewPerson.BirthDate" />
                </div>
				
                <div class="text-center p-3 mb-3">
                    <button type="submit">Add Person</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Person</div>

            <EditForm Model="@UpdatePerson">
                <div class="form-group">
                    <label for="FirstName">Person First Name</label>
                    <input type="text" id="FirstName" class="form-control" @bind-value="@UpdatePerson.FirstName" />
                </div>

				<div class="form-group">
                    <label for="LastName">Person Last Name</label>
                    <input type="text" id="LastName" class="form-control" @bind-value="@UpdatePerson.LastName" />
                </div>

				<div class="form-group">
                    <label for="PhoneNumber">Person Phone</label>
                    <input type="text" id="PhoneNumber" class="form-control" @bind-value="@UpdatePerson.PhoneNumber" />
                </div>

				<div class="form-group">
                    <label for="BirthDate">Person Birth date</label>
                    <input type="datetime" id="BirthDate" class="form-control" @bind-value="@UpdatePerson.BirthDate" />
                </div>


                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdatePersonData"> Update Person</button>
                </div>
            </EditForm>
        </div>
    </div>

</div>


@code {


	List<Person> Persons = new List<Person>();

	protected override async Task OnInitializedAsync()
	{
		await RefreshPersons();
	}
	private async Task RefreshPersons()
	{
		Persons = await service.GetPersonAsync();
	}

	public Person NewPerson { get; set; } = new Person();

	private async Task AddNewPerson()
	{
		
			await service.AddPersonAsync(NewPerson);

			NewPerson = new Person();
			await RefreshPersons();

	}

	Person UpdatePerson = new Person();
	private void SetPersonUpdate(Person person)
	{
		UpdatePerson = person;
	}

	private async Task UpdatePersonData()
	{
		await service.UpdatePersonAsync(UpdatePerson);
		await RefreshPersons();
	}

	private async Task DeletePerson(Person person)
	{
		await service.DeletePersonAsync(person);
		await RefreshPersons();
	}




}