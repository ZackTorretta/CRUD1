@page "/"
@inject NavigationManager UriHelper
@using CRUD1.Data

@inject PersonServices service



<div class="container">
	<style>
		
        h1 {
			text-align: right;
			font-size:150%;
        }
		</style>
	<h1><button @onclick=@NavigateAdd>Add</button></h1>
	<div class="row bg-light">
		<table class="table table-bordered">
			<thead class="thead-dark">
				<tr>
					<th>Person Id</th>
					<th>LastName</th>
					<th>FirstName</th>
					<th>PhoneNumber</th>
					<th>BirthDate</th>
					<th>Delete Person</th>
					<th>Edit Person</th>
				</tr>
			</thead>
			<tbody>
				@if (Persons.Any()) //list
				{
					@foreach (var person in Persons) //navigate list
					{
						<tr>
							<td>@person.Id</td>
							<td>@person.LastName</td>
							<td>@person.FirstName</td>
							<td>@person.PhoneNumber</td>
							<td>@person.BirthDate</td
							<td><button class="btn btn-danger" @onclick="(() => DeletePerson(person))">Delete</button></td>
							<td><button class="btn btn-primary" @onclick="(() => NavigateEdit(person))">Edit</button></td>
						</tr>
					}
				}
				else
				{
					<tr><td colspan="6"><strong>No persons available</strong></td></tr> //when list is empty. mess with this
				}
			</tbody>
		</table>
	</div>
</div>


@code {

	//NAVIGATION SECTION
	private Person? Person { get; set; }
	void NavigateAdd()
	{
    UriHelper.NavigateTo("add");
	}
	void NavigateEdit(Person person)
	{
		UriHelper.NavigateTo("/edit/" + person.Id);
	}
	//*****/

	List<Person> Persons = new List<Person>();
	protected override async Task OnInitializedAsync()
	{
		await RefreshPersons();
	}
	private async Task RefreshPersons()
	{
		Persons = await service.GetPersonAsync();
	}

	private async Task DeletePerson(Person person)
	{
		await service.DeletePersonAsync(person);
		await RefreshPersons();
	}




}